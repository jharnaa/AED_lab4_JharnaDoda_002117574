/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Encounter;
import model.EncounterHistory;
import model.PatientDirectory;
import model.PersonDirectory;

/**
 *
 * @author jharnadoda
 */
public class EncounterDetailsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form EncounterDetailsJPanel
     */
    
    PersonDirectory personDirect;
    PatientDirectory pd;
    EncounterHistory encounterHist;
    
    public EncounterDetailsJPanel(PersonDirectory personDirect,PatientDirectory pd,EncounterHistory encounterHist) {
        initComponents();
        
        this.personDirect = personDirect;
        this.pd = pd;
        this.encounterHist = encounterHist;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCheck = new javax.swing.JButton();
        lblPatientName = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEncounterHist = new javax.swing.JTable();

        setBackground(new java.awt.Color(204, 204, 255));

        btnCheck.setText("Check");
        btnCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckActionPerformed(evt);
            }
        });

        lblPatientName.setText("Enter Patient Name");

        txtFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFirstNameActionPerformed(evt);
            }
        });

        tblEncounterHist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Encounter Date", "Weight", "Body Temperature", "Heart Rate", "Systolic Blood Pressure", "Diastolic Blood Pressure", "Result"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblEncounterHist);
        if (tblEncounterHist.getColumnModel().getColumnCount() > 0) {
            tblEncounterHist.getColumnModel().getColumn(3).setResizable(false);
            tblEncounterHist.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(173, 173, 173)
                .addComponent(lblPatientName)
                .addGap(18, 18, 18)
                .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btnCheck)
                .addContainerGap(231, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPatientName)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCheck))
                .addGap(38, 38, 38)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(259, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFirstNameActionPerformed

    private void btnCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckActionPerformed
        // TODO add your handling code here:
        
        String firstName = txtFirstName.getText();
        
        DefaultTableModel model = (DefaultTableModel) tblEncounterHist.getModel();
        model.setRowCount(0); 
        
        if(pd.getPatientDetails().containsKey(firstName))
        {
            
            for(Encounter e :pd.getPatientDetails().get(firstName).getEncounterHist().getEncounterHist())
                {
                    Object[] row = new Object[7];
                    row[0] = e.getDate();
                    
                    row[1] = e.getVitals().getWeight();
                    row[2] = e.getVitals().getTemp();
                    row[3] = e.getVitals().getHeartRate();
                    row[4] = e.getVitals().getsBloodPressure();
                    row[5] = e.getVitals().getdBloodPressure();
                    
                    if(pd.getPatientDetails().get(firstName).isPatientNormal() == true)
        {
            System.out.println(e.getVitals().getsBloodPressure());
            row[6] = "Normal";
        }
        else
           {
               //System.out.println("Its falseeeee");
                row[6]="Not Normal";
           }

                    model.addRow(row);
                }
        }
        
    }//GEN-LAST:event_btnCheckActionPerformed


    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheck;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPatientName;
    private javax.swing.JTable tblEncounterHist;
    private javax.swing.JTextField txtFirstName;
    // End of variables declaration//GEN-END:variables
}
